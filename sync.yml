---
- include: variable-check.yml
  vars:
    playbook: sync.yml

# TODO: split playbook into at least two plays - one for db, one for rsync. This will be necessary because the rsync/syncronize module requires very specific host-in-context and delegate_to values in order to work.

- name: Sync WP database
  hosts: web:&{{ dest }}
  remote_user: "{{ web_user }}"

  vars:
    project: "{{ wordpress_sites[site] }}"
    project_root: "{{ www_root }}/{{ site }}"
    project_current_path: "{{ project.current_path | default('current') }}"
    site_path: "{{ project_root }}/{{ project_current_path }}/web"
    shared_path: "{{ project_root }}/shared"
    uploads_path: "{{ shared_path }}/uploads"
    project_local_path: "{{ (lookup('env', 'USER') == 'vagrant') | ternary(project_root + '/' + project_current_path, project.local_path) }}"

  pre_tasks:
    - name: Ensure site is valid
      # TODO: check the site on both dest and src
      connection: local
      fail:
        msg: "Site `{{ site | default('') }}` is not valid. Available sites to sync: {{ wordpress_sites.keys() | join(', ') }}"
      when: wordpress_sites[site | default('')] is not defined

  tasks:

    - name: get dest home directory
      command: echo $HOME
      register: dest_homedir

    - name: get src home directory
      command: echo $HOME
      register: src_homedir      
      delegate_to: "{{ groups[src][0] }}"
      remote_user: "{{ hostvars[groups[src][0]].web_user }}"

    - name: backup db on src
      command: wp db export {{ src_homedir.stdout }}/{{ site }}_{{ src }}_{{ ansible_date_time.epoch }}.sql
      args:
        chdir: "{{ site_path }}"
      delegate_to: "{{ groups[src][0] }}"

    - name: send db backup from src to dest
      synchronize:
        src: "{{ src_homedir.stdout }}/{{ site }}_{{ src }}_{{ ansible_date_time.epoch }}.sql"
        dest: "{{ dest_homedir.stdout }}/"
      delegate_to: "{{ groups[src][0] }}"

    - name: reset db on dest
      command: wp db reset --yes
      args:
        chdir: "{{ site_path }}"

    - name: import db on dest
      command: wp db import {{ dest_homedir.stdout }}/{{ site }}_{{ src }}_{{ ansible_date_time.epoch }}.sql
      args:
        chdir: "{{ site_path }}"

    - name: wp-cli search-replace on domain names
      command: wp search-replace {{ hostvars[groups[src][0]].wordpress_sites[site]['site_hosts'][0]['canonical'] }} {{ wordpress_sites[site]['site_hosts'][0]['canonical'] }}
      args:
        chdir: "{{ site_path }}"

- name: Sync WP site
  hosts: web:&{{ dest }}
  remote_user: "{{ (dest == 'development') | ternary('vagrant', web_user) }}" # actually, isn't web_user already set to 'vagrant' in dev group_vars?

  vars:
    # deploy_build_before: "{{ playbook_dir }}/deploy-hooks/build-before.yml"
    # deploy_build_after: "{{ playbook_dir }}/roles/deploy/hooks/build-after.yml"
    # deploy_finalize_after: "{{ playbook_dir }}/roles/deploy/hooks/finalize-after.yml"
    project: "{{ wordpress_sites[site] }}"
    project_root: "{{ www_root }}/{{ site }}"
    # wordpress_env_defaults:
    #   db_host: localhost
    #   db_name: "{{ site | underscore }}_{{ dest }}"
    #   db_user: "{{ site | underscore }}"
    #   disable_wp_cron: true
    #   wp_env: "{{ dest }}"
    #   wp_home: "{{ project.ssl.enabled | default(false) | ternary('https', 'http') }}://{{ project.site_hosts | map(attribute='canonical') | first }}"
    #   wp_siteurl: "{{ project.ssl.enabled | default(false) | ternary('https', 'http') }}://{{ project.site_hosts | map(attribute='canonical') | first }}/wp"
    # site_env: "{{ wordpress_env_defaults | combine(project.env | default({}), vault_wordpress_sites[site].env) }}"

    project_current_path: "{{ project.current_path | default('current') }}"
    site_path: "{{ project_root }}/{{ project_current_path }}/web"
    shared_path: "{{ project_root }}/shared"
    uploads_path: "{{ shared_path }}/uploads"

    project_local_path: "{{ (lookup('env', 'USER') == 'vagrant') | ternary(project_root + '/' + project_current_path, project.local_path) }}"

    test_remote_user: "{{ (dest == 'development') | ternary('vagrant', web_user) }}"

  pre_tasks:

    - fail:
        msg: skip this play right now

    - debug:
        var: test_remote_user

    - name: Ensure site is valid
      # TODO: check the site on both dest and src
      connection: local
      fail:
        msg: "Site `{{ site | default('') }}` is not valid. Available sites to sync: {{ wordpress_sites.keys() | join(', ') }}"
      when: wordpress_sites[site | default('')] is not defined

    ## No repo required for sync
    # - name: Ensure repo is valid
    #   connection: local
    #   fail:
    #     msg: |
    #       Invalid Git repository.
    #       Ensure that your site's `repo` variable is defined in `group_vars/{{ dest }}/wordpress_sites.yml` and uses the SSH format (example: git@github.com:roots/bedrock.git)
    #       More info:
    #       > https://roots.io/trellis/docs/deploys/
    #   when: project.repo is not defined or not project.repo | match(".*@.*:.*\.git")

  ## NOTE: problems when running against the 'development' group:
  ## * by default, ansible will look in the hosts/development file, which is supposed to be for Windows hosts only. Therefore, use the `-i` flag as documented in said file. This could be a problem going forward. Do we need to symlink/inventory-script the vagrant-generated file to this directory? And combine the windows settings into the generated file?
  ## * current version of ansible (2.0.2.0) has problems connecting to vagrant boxes. See https://github.com/ansible/ansible/issues/15321
  ## * pinging helped the above issue on one occasion: https://github.com/ansible/ansible/issues/15321#issuecomment-256346976
  ## * adding `-c paramiko -u vagrant` to the command can supposedly help - unsuccessful for me.
  ## * some people say various ansilbe versions will work:
  ##     - https://github.com/ansible/ansible/issues/15321#issuecomment-256781623
  ##     - https://github.com/ansible/ansible/issues/15321#issuecomment-256979582

  tasks:

    - name: get hostname
      command: hostname
      register: hostname

    - name: print hostname
      debug:
        var: hostname.stdout

    - name: get dest home directory
      command: echo $HOME
      register: dest_homedir

    - name: print dest home directory
      debug:
        var: dest_homedir.stdout

    - debug:
        var: hostvars[groups[src][0]].web_user

    - name: get src home directory
      command: echo $HOME
      register: src_homedir      
      delegate_to: "{{ groups[src][0] }}"
      remote_user: "{{ hostvars[groups[src][0]].web_user }}"

    - include: "sync-files-remote-to-remote.yml"
      when: "'development' not in [src, dest]"

    - include: "sync-files-remote-to-vagrant.yml"
      when: "dest == 'development'"

    - name: backup db on src
      command: wp db export {{ src_homedir.stdout }}/{{ site }}_{{ src }}_{{ ansible_date_time.epoch }}.sql
      args:
        chdir: "{{ site_path }}"
      delegate_to: "{{ groups[src][0] }}"

    - name: send db backup from src to dest
      synchronize:
        src: "{{ src_homedir.stdout }}/{{ site }}_{{ src }}_{{ ansible_date_time.epoch }}.sql"
        dest: "{{ dest_homedir.stdout }}/"
      delegate_to: "{{ groups[src][0] }}"

    - name: reset db on dest
      command: wp db reset --yes
      args:
        chdir: "{{ site_path }}"

    - name: import db on dest
      command: wp db import {{ dest_homedir.stdout }}/{{ site }}_{{ src }}_{{ ansible_date_time.epoch }}.sql
      args:
        chdir: "{{ site_path }}"

    - name: wp-cli search-replace on domain names
      command: wp search-replace {{ hostvars[groups[src][0]].wordpress_sites[site]['site_hosts'][0]['canonical'] }} {{ wordpress_sites[site]['site_hosts'][0]['canonical'] }}
      args:
        chdir: "{{ site_path }}"

    # TODO: deal with WSOD after sync
